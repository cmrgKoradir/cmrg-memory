{"version":3,"sources":["serviceWorker.js","Store.js","components/memory/Card.js","components/memory/ImageCard.js","components/memory/TextCard.js","components/memory/Memory.js","App.js","components/pages/About.js","components/layout/Header.js","index.js"],"names":["Boolean","window","location","hostname","match","CardInfoContext","React","createContext","CardSelectionContext","Store","children","useState","cardInfo","setCardInfo","cardSelection","setCardSelection","Provider","value","flipCard","uniqueCardSelector","currentSelection","setSelection","length","card","document","querySelector","classList","contains","add","Card","id","pairId","useContext","className","pairid","onClick","ImageCard","info","src","image","alt","memoryTextStyle","display","flexDirection","justifyContent","alignItems","TextCard","style","name","nickName","position","createCards","shuffle","flatMap","imageCardId","textCardId","Array","of","key","iterable","arr","from","n","keys","i","j","Math","floor","random","tmp","checkSelection","Error","pairIdA","parseInt","getAttribute","console","log","pairIdB","setTimeout","forEach","remove","memoryStyle","width","height","flexWrap","padding","Memory","useEffect","availableCards","setAvailableCards","App","fetch","then","response","text","htmlString","portraits","DOMParser","parseFromString","querySelectorAll","map","portrait","innerText","replace","host","index","fetchData","About","href","headerStyle","background","color","headerLinkStyle","Header","to","ReactDOM","render","StrictMode","Helmet","content","basename","process","path","component","exact","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBChBOC,G,MAAkBC,IAAMC,cAAc,KACtCC,EAAuBF,IAAMC,cAAc,IAezCE,EAbD,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,OAEgBF,mBAAS,IAFzB,mBAEnBG,EAFmB,KAEJC,EAFI,KAI1B,OACI,kBAACV,EAAgBW,SAAjB,CAA0BC,MAAO,CAACL,EAAUC,IACxC,kBAACL,EAAqBQ,SAAtB,CAA+BC,MAAO,CAACH,EAAeC,IACjDL,K,gBCIXQ,G,MAAW,SAACC,EAAoBC,EAAkBC,GACpD,KAAGD,EAAiBE,QAAU,GAA9B,CAEA,IAAMC,EAAOC,SAASC,cAAcN,GACjCI,EAAKG,UAAUC,SAAS,aAE3BJ,EAAKG,UAAUE,IAAI,WACnBP,EAAa,GAAD,mBAAKD,GAAL,CAAuBG,SAGxBM,EAtBF,SAAC,GAA4B,IAA3BnB,EAA0B,EAA1BA,SAAUoB,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,OAAY,EACKC,qBAAWxB,GADhB,mBAC9BM,EAD8B,KACfC,EADe,KAErC,OACI,yBAAKkB,UAAS,eAAUH,GAAMI,OAAQH,EAAQI,QAAS,kBAAMjB,EAAS,IAAD,OAAKY,GAAMhB,EAAeC,KAA/F,IACI,yBAAKkB,UAAU,WACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,QAAQvB,MCCxB0B,EARG,SAAC,GAAwB,IAAvBN,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,OAAQM,EAAU,EAAVA,KAC5B,OACI,kBAAC,EAAD,CAAMP,GAAIA,EAAIC,OAAQA,GAClB,yBAAKO,IAAKD,EAAKE,MAAOC,IAAI,OCQhCC,EAAkB,CACpBC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAGDC,EAlBE,SAAC,GAAwB,IAAvBhB,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,OAAQM,EAAU,EAAVA,KAC3B,OACI,kBAAC,EAAD,CAAMP,GAAIA,EAAIC,OAAQA,GAClB,yBAAKgB,MAAON,GACR,gCAASJ,EAAKW,MACbX,EAAKY,UAAY,kCAAQZ,EAAKY,SAAb,KAClB,8BAAOZ,EAAKa,aCetBC,EAAc,SAACvC,GAAD,OAAcwC,EAAQxC,EAASyC,SAAQ,SAAChB,GACxD,IAAMP,EAAKO,EAAKP,GACVwB,EAAW,cAAUxB,EAAV,UACXyB,EAAU,cAAUzB,EAAV,SAChB,OAAQ0B,MAAMC,GAEV,kBAAC,EAAD,CAAWC,IAAKJ,EAAaxB,GAAIwB,EAAavB,OAAQD,EAAIO,KAAMA,IAChE,kBAAC,EAAD,CAAUqB,IAAKH,EAAYzB,GAAIyB,EAAYxB,OAAQD,EAAIO,KAAMA,UAI/De,EAAU,SAACO,GACb,IAD0B,EACpBC,EAAMJ,MAAMK,KAAKF,GAEjBG,EAAIF,EAAItC,OAAS,EAHG,cAIXsC,EAAIG,QAJO,IAI1B,IAAI,EAAJ,qBAA0B,CAAC,IAAjBC,EAAgB,QAEhBC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYN,EAAIE,EAAI,GAAKA,GAC7CK,EAAMT,EAAII,GAChBJ,EAAII,GAAKJ,EAAIK,GACbL,EAAIK,GAAKI,GATa,8BAW1B,OAAOT,GAGLU,EAAiB,SAAClD,EAAkBL,GAAsB,IAAD,IAC3D,KAAGK,EAAiBE,OAAS,GAA7B,CACA,GAAGF,EAAiBE,OAAS,EAAG,MAAMiD,MAAM,yDAE5C,IAAMC,EAAO,UAAGC,SAASrD,EAAiB,GAAGsD,aAAa,kBAA7C,QAA2D,KACxE,GAAc,MAAXF,EAEC,MADAG,QAAQC,IAAIxD,GACNmD,MAAM,YAAD,OAAanD,EAAiB,GAA9B,kCAGf,IAAMyD,EAAO,UAAGJ,SAASrD,EAAiB,GAAGsD,aAAa,kBAA7C,QAA2D,KACxE,GAAc,MAAXG,EAEC,MADAF,QAAQC,IAAIxD,GACNmD,MAAM,YAAD,OAAanD,EAAiB,GAA9B,kCAIZoD,IAAYK,EACXC,YAAW,WACP/D,EAAiB,IACjBK,EAAiB2D,SAAQ,SAAAxD,GAAI,OAAIA,EAAKG,UAAUE,IAAI,eACtD,MAGFkD,YAAW,WACP1D,EAAiB2D,SAAQ,SAAAxD,GAAI,OAAIA,EAAKG,UAAUsD,OAAO,cACvDjE,EAAiB,MAClB,QAILkE,EAAc,CAChBC,MAAO,OACPC,OAAQ,OAERzC,QAAS,OACT0C,SAAU,OACVC,QAAS,SACTzC,eAAgB,eAChBC,WAAY,UAGDyC,EArFA,WAAO,IAAD,EACEtD,qBAAW3B,GAAvBO,EADU,sBAEyBoB,qBAAWxB,GAFpC,mBAEVM,EAFU,KAEKC,EAFL,KAGjBwE,qBAAU,WACNjB,EAAexD,EAAeC,KAChC,CAACD,EAAeC,IALD,MAO2BJ,mBAASwC,EAAYvC,IAPhD,mBAOV4E,EAPU,KAOMC,EAPN,KAUjB,OAFAF,qBAAU,kBAAME,EAAkBtC,EAAYvC,MAAW,CAACA,EAAU6E,IAGhE,yBAAKxD,UAAU,SAASc,MAAOkC,IACzBrE,GAAY,wBAAIqB,UAAU,iBAAd,oBACbuD,ICmBEE,MAjCH,WAAO,IAAD,EACQ1D,qBAAW3B,GAA1BQ,EADO,oBAKhB,OAFA0E,qBAAU,kBAUZ,SAAmB1E,GAEjB8E,MAAM,4DACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IACMC,GADM,IAAIC,WAAYC,gBAAgBH,EAAY,aAClCI,iBAAiB,aAQvC,OAPiB3C,MAAMK,KAAKmC,GACzBI,KAAI,SAAAC,GAAQ,YAAK,CAChBrD,KAAMqD,EAAS5E,cAAc,iBAAiB6E,UAC9CrD,SAAQ,UAAEoD,EAAS5E,cAAc,mBAAzB,aAAE,EAAoC6E,UAC9CpD,SAAUmD,EAAS5E,cAAc,SAAS6E,UAC1C/D,MAAO8D,EAAS5E,cAAc,oBAAoBa,IAAIiE,QAAQtG,OAAOC,SAASsG,KAAK,0BAIxFZ,MAAK,SAAAhF,GAAQ,OAAIA,EAASwF,KAAI,SAAC/D,EAAMoE,GAAP,oBAAmB3E,GAAI2E,GAAUpE,SAC/DuD,MAAK,SAAAhF,GAAQ,OAAIC,EAAYD,MA3BhB8F,CAAU7F,KAAc,CAACA,IAGvC,oCACE,yBAAKoB,UAAU,OACb,kBAAC,EAAD,SCFO0E,EATD,kBACV,oCACI,qCACA,iIACA,4CAAiB,uBAAGC,KAAK,gCAAR,yBAAjB,0FCIFC,EAAc,CAChBnE,QAAS,OACTC,cAAe,SAEfE,WAAY,SAEZwC,QAAS,QAETyB,WAAY,OACZC,MAAO,SAGLC,EAAkB,CACpBD,MAAO,SAGIE,EAvBA,kBACX,4BAAQlE,MAAO8D,GACX,2CACA,6BAAK,kBAAC,IAAD,CAAMK,GAAG,IAAInE,MAAOiE,GAApB,QAAL,MAAwD,kBAAC,IAAD,CAAME,GAAG,SAASnE,MAAOiE,GAAzB,YCKhEG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,0BAAMtE,KAAK,WAAWuE,QAAQ,yCAEhC,kBAAC,IAAD,CAAQC,SAAYC,gBAClB,kBAAC,IAAD,CAAOC,KAAO,IAAIC,UAAWV,IAC7B,kBAAC,IAAD,CAAOW,OAAK,EAACF,KAAK,IAAIC,UAAYjC,IAClC,kBAAC,IAAD,CAAOgC,KAAK,SAASC,UAAahB,OAIxCnF,SAASqG,eAAe,ST2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.b7adcbf6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\n\nexport const CardInfoContext = React.createContext([])\nexport const CardSelectionContext = React.createContext([])\n\nconst Store = ({children}) => {\n    const [cardInfo, setCardInfo] = useState([])\n    const [cardSelection, setCardSelection] = useState([])\n\n    return (\n        <CardInfoContext.Provider value={[cardInfo, setCardInfo]}>\n            <CardSelectionContext.Provider value={[cardSelection, setCardSelection]}>\n                {children}\n            </CardSelectionContext.Provider>\n        </CardInfoContext.Provider>\n    )\n}\n\nexport default Store","import React, { useContext } from 'react'\nimport './Card.css'\nimport { CardSelectionContext } from '../../Store'\n\nconst Card = ({children, id, pairId}) => {\n    const [cardSelection, setCardSelection] = useContext(CardSelectionContext)\n    return (\n        <div className={`card ${id}`} pairid={pairId} onClick={() => flipCard(`.${id}`, cardSelection, setCardSelection)}> {/* Note: setting `id=`, here would actually move the id to react `props` */}\n            <div className=\"content\">\n                <div className=\"front\"></div>\n                <div className=\"back\">{children}</div>\n            </div>\n        </div>\n    )\n}\n\nconst flipCard = (uniqueCardSelector, currentSelection, setSelection) => {\n    if(currentSelection.length >= 2) return\n\n    const card = document.querySelector(uniqueCardSelector)\n    if(card.classList.contains(\"flipped\")) return\n\n    card.classList.add(\"flipped\")\n    setSelection([...currentSelection, card])\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst ImageCard = ({id, pairId, info}) => {\n    return (\n        <Card id={id} pairId={pairId}>\n            <img src={info.image} alt=\"\" />\n        </Card>\n    )\n}\n\nexport default ImageCard","import React from 'react'\nimport Card from './Card'\n\nconst TextCard = ({id, pairId, info}) => {\n    return (\n        <Card id={id} pairId={pairId}>\n            <div style={memoryTextStyle}>\n                <strong>{info.name}</strong>\n                {info.nickName && <span>\"{info.nickName}\"</span>}\n                <span>{info.position}</span>\n            </div>\n        </Card>\n)}\n\nconst memoryTextStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n}\n\nexport default TextCard","import React, { useState, useContext, useEffect } from 'react'\nimport { CardInfoContext, CardSelectionContext } from './../../Store'\n\nimport ImageCard from './ImageCard'\nimport TextCard from './TextCard'\n\nconst Memory = () => {\n    const [cardInfo] = useContext(CardInfoContext)\n    const [cardSelection, setCardSelection] = useContext(CardSelectionContext)\n    useEffect(() => {\n        checkSelection(cardSelection, setCardSelection)\n    },[cardSelection, setCardSelection])\n\n    const [availableCards, setAvailableCards] = useState(createCards(cardInfo))\n    useEffect(() => setAvailableCards(createCards(cardInfo)),[cardInfo, setAvailableCards])\n\n    return (\n        <div className=\"memory\" style={memoryStyle}>\n            {!cardInfo && <h1 className=\"loadingNotice\">Fetching data...</h1>}\n            {availableCards}\n        </div>\n    )\n}\n\nconst createCards = (cardInfo) => shuffle(cardInfo.flatMap((info) => {\n    const id = info.id\n    const imageCardId = `card${id}_image`\n    const textCardId = `card${id}_text`\n    return (Array.of(\n        //note: `key` is not a `prop` so we have to pass the ID down as a seperatre property\n        <ImageCard key={imageCardId} id={imageCardId} pairId={id} info={info} />,\n        <TextCard key={textCardId} id={textCardId} pairId={id} info={info} />\n    ))\n}))\n\nconst shuffle = (iterable) => {\n    const arr = Array.from(iterable)\n    \n    const n = arr.length - 1\n    for(const i of arr.keys()){\n        //fisher-yates: j random s.t. i <= j <= n\n        const j = Math.floor(Math.random() * (n - i + 1) + i)\n        const tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n    }\n    return arr\n}\n\nconst checkSelection = (currentSelection, setCardSelection) => {\n    if(currentSelection.length < 2) return\n    if(currentSelection.length > 2) throw Error(\"Illegal State: More than two cards selected at a time\")\n\n    const pairIdA = parseInt(currentSelection[0].getAttribute('pairid')) ?? null\n    if(pairIdA == null) {\n        console.log(currentSelection)\n        throw Error(`Expected ${currentSelection[0]} to have pairId but does not.`)\n    }\n\n    const pairIdB = parseInt(currentSelection[1].getAttribute('pairid')) ?? null\n    if(pairIdB == null){\n        console.log(currentSelection)\n        throw Error(`Expected ${currentSelection[1]} to have pairId but does not.`)\n    } \n\n    //the timeouts are necessary to allow the cards to fully flip and display for a while before the action happens\n    if(pairIdA === pairIdB){\n        setTimeout(() => {\n            setCardSelection([])\n            currentSelection.forEach(card => card.classList.add(\"hidden\"))\n        },1200)\n\n    }else {\n        setTimeout(() => {\n            currentSelection.forEach(card => card.classList.remove(\"flipped\"))\n            setCardSelection([])\n        }, 1200)\n    }\n}\n\nconst memoryStyle = {\n    width: '100%',\n    height: '100%',\n\n    display: 'flex',\n    flexWrap: 'wrap',\n    padding: '.25rem',\n    justifyContent: 'space-evenly',\n    alignItems: 'center'\n}\n\nexport default Memory","import React, { useContext, useEffect } from 'react'\nimport './App.css'\nimport { CardInfoContext } from './Store'\nimport Memory from './components/memory/Memory'\n\nconst App = () => {\n  const [, setCardInfo] = useContext(CardInfoContext)\n\n  useEffect(() => fetchData(setCardInfo), [setCardInfo])\n  \n  return (\n    <>\n      <div className=\"app\">\n        <Memory />\n      </div>\n    </>\n)};\n\nfunction fetchData(setCardInfo){\n  //quick and dirty hack to get around CORS restrictions. Security issue because routing over third party!\n  fetch('https://cors-anywhere.herokuapp.com/www.comerge.net/team')\n    .then(response => response.text())\n    .then(htmlString => {\n      const dom = new DOMParser().parseFromString(htmlString, 'text/html')\n      const portraits = dom.querySelectorAll('.portrait')\n      const cardInfo = Array.from(portraits)\n        .map(portrait => ({\n          name: portrait.querySelector('.intro strong').innerText,\n          nickName: portrait.querySelector('.intro p')?.innerText,\n          position: portrait.querySelector('.role').innerText,\n          image: portrait.querySelector('.imageSlider img').src.replace(window.location.host,\"www.comerge.net\")\n        }))\n      return cardInfo\n    })\n    .then(cardInfo => cardInfo.map((info, index) => ({id: index, ...info, })))\n    .then(cardInfo => setCardInfo(cardInfo))\n}\n\nexport default App;\n","import React from 'react'\n\nconst About = () => (\n    <>\n        <h1>About</h1>\n        <p>This is a simple memory game meant as an exercise to get familiar with JavaScript, React and PWAs.</p>\n        <p>It will crawl <a href=\"https://www.comerge.net/team\">the Comerge Team Page</a> for updates when it's online\n        and use the profiles there to populate the cards with.</p>\n    </>\n);\n\nexport default About","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => (\n    <header style={headerStyle}>\n        <h1>CMRG Memory</h1>\n        <div><Link to=\"/\" style={headerLinkStyle}>Home</Link> | <Link to=\"/about\" style={headerLinkStyle}>About</Link></div>\n    </header>\n)\n\nconst headerStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n\n    alignItems: 'center',\n\n    padding: '.25em',\n\n    background: '#333',\n    color: 'white'\n}\n\nconst headerLinkStyle = {\n    color: 'white'\n}\n\nexport default Header","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport { Helmet } from 'react-helmet';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport Store from './Store'\nimport About from './components/pages/About'\nimport Header from './components/layout/Header';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store>\n      <Helmet>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      </Helmet>\n      <Router basename = {process.env.PUBLIC_URL}>\n        <Route path = \"/\" component={Header}/>\n        <Route exact path=\"/\" component= {App} />\n        <Route path=\"/about\" component = {About} />\n      </Router>\n    </Store>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}