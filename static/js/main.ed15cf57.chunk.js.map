{"version":3,"sources":["serviceWorker.js","Store.js","components/memory/Memory.js","App.js","components/pages/About.js","components/layout/Header.js","index.js"],"names":["Boolean","window","location","hostname","match","CardInfoContext","React","createContext","Store","children","useState","cardInfo","setCardInfo","Provider","value","createCards","info","src","image","alt","style","memoryImageStyle","memoryStyle","width","height","display","flexWrap","padding","justifyContent","alignItems","marginTop","Memory","useContext","className","map","App","useEffect","fetch","then","response","text","htmlString","portraits","DOMParser","parseFromString","querySelectorAll","Array","from","portrait","name","querySelector","innerText","nickName","position","replace","host","fetchData","About","href","headerStyle","flexDirection","background","color","headerLinkStyle","Header","to","ReactDOM","render","StrictMode","basename","process","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBOC,G,MAAkBC,IAAMC,cAAc,KAYpCC,EAVD,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,KAG1B,OACI,kBAACP,EAAgBQ,SAAjB,CAA0BC,MAAQ,CAACH,EAAUC,IACxCH,ICKPM,EAAc,SAACC,GAAD,OAChB,yBAAKC,IAAKD,EAAKE,MAAOC,IAAI,GAAGC,MAAOC,KAGlCC,EAAc,CAChBC,MAAO,OACPC,OAAQ,OAERC,QAAS,OACTC,SAAU,OACVC,QAAS,SACTC,eAAgB,eAChBC,WAAY,UAGVR,EAAmB,CACrBS,UAAW,UAGAC,EA9BA,WAAO,IAAD,EACEC,qBAAW3B,GAAvBM,EADU,oBAGjB,OACI,yBAAKsB,UAAU,SAASb,MAAOE,IACzBX,GAAY,wBAAIsB,UAAU,iBAAd,oBACbtB,EAASuB,KAAK,SAAAlB,GAAI,OAAID,EAAYC,QC4BhCmB,MAhCH,WAAO,IAAD,EACQH,qBAAW3B,GAA1BO,EADO,oBAKhB,OAFAwB,qBAAU,kBAUZ,SAAmBxB,GAEjByB,MAAM,4DACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IACMC,GADM,IAAIC,WAAYC,gBAAgBH,EAAY,aAClCI,iBAAiB,aAQvC,OAPiBC,MAAMC,KAAKL,GACzBR,KAAI,SAAAc,GAAQ,YAAK,CAChBC,KAAMD,EAASE,cAAc,iBAAiBC,UAC9CC,SAAQ,UAAEJ,EAASE,cAAc,mBAAzB,aAAE,EAAoCC,UAC9CE,SAAUL,EAASE,cAAc,SAASC,UAC1CjC,MAAO8B,EAASE,cAAc,oBAAoBjC,IAAIqC,QAAQrD,OAAOC,SAASqD,KAAK,0BAIxFjB,MAAK,SAAA3B,GAAQ,OAAIC,EAAYD,MA1BhB6C,CAAU5C,KAAc,IAGtC,oCACE,yBAAKqB,UAAU,OACb,kBAAC,EAAD,SCFOwB,EATD,kBACV,oCACI,qCACA,iIACA,4CAAiB,uBAAGC,KAAK,gCAAR,yBAAjB,0FCIFC,EAAc,CAChBlC,QAAS,OACTmC,cAAe,SAEf/B,WAAY,SAEZF,QAAS,QAETkC,WAAY,OACZC,MAAO,SAGLC,EAAkB,CACpBD,MAAO,SAGIE,EAvBA,kBACX,4BAAQ5C,MAAOuC,GACX,2CACA,6BAAK,kBAAC,IAAD,CAAMM,GAAG,IAAI7C,MAAO2C,GAApB,QAAL,MAAwD,kBAAC,IAAD,CAAME,GAAG,SAAS7C,MAAO2C,GAAzB,YCIhEG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAQC,SAAYC,gBAClB,kBAAC,IAAD,CAAOC,KAAO,IAAIC,UAAWR,IAC7B,kBAAC,IAAD,CAAOS,OAAK,EAACF,KAAK,IAAIC,UAAYrC,IAClC,kBAAC,IAAD,CAAOoC,KAAK,SAASC,UAAaf,OAIxCiB,SAASC,eAAe,SN+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed15cf57.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\n\nexport const CardInfoContext = React.createContext([])\n\nconst Store = ({children}) => {\n    const [cardInfo, setCardInfo] = useState([])\n\n    return (\n        <CardInfoContext.Provider value= {[cardInfo, setCardInfo]}>\n            {children}\n        </CardInfoContext.Provider>\n    )\n}\n\nexport default Store","import React, { useContext } from 'react'\nimport { CardInfoContext } from './../../Store'\n\nconst Memory = () => {\n    const [cardInfo] = useContext(CardInfoContext)\n\n    return (\n        <div className=\"memory\" style={memoryStyle}>\n            {!cardInfo && <h1 className=\"loadingNotice\">Fetching data...</h1>}\n            {cardInfo.map( info => createCards(info))}\n        </div>\n    )\n}\n\nconst createCards = (info) => (\n    <img src={info.image} alt=\"\" style={memoryImageStyle}/>   \n)\n\nconst memoryStyle = {\n    width: '100%',\n    height: '100%',\n\n    display: 'flex',\n    flexWrap: 'wrap',\n    padding: '.25rem',\n    justifyContent: 'space-evenly',\n    alignItems: 'center'\n}\n\nconst memoryImageStyle = {\n    marginTop: '.75rem'\n}\n\nexport default Memory","import React, { useContext, useEffect } from 'react'\nimport './App.css'\nimport { CardInfoContext } from './Store'\nimport Memory from './components/memory/Memory'\n\nconst App = () => {\n  const [, setCardInfo] = useContext(CardInfoContext)\n\n  useEffect(() => fetchData(setCardInfo), [])\n  \n  return (\n    <>\n      <div className=\"app\">\n        <Memory />\n      </div>\n    </>\n)};\n\nfunction fetchData(setCardInfo){\n  //quick and dirty hack to get around CORS restrictions. Security issue because routing over third party!\n  fetch('https://cors-anywhere.herokuapp.com/www.comerge.net/team')\n    .then(response => response.text())\n    .then(htmlString => {\n      const dom = new DOMParser().parseFromString(htmlString, 'text/html')\n      const portraits = dom.querySelectorAll('.portrait')\n      const cardInfo = Array.from(portraits)\n        .map(portrait => ({\n          name: portrait.querySelector('.intro strong').innerText,\n          nickName: portrait.querySelector('.intro p')?.innerText,\n          position: portrait.querySelector('.role').innerText,\n          image: portrait.querySelector('.imageSlider img').src.replace(window.location.host,\"www.comerge.net\")\n        }))\n      return cardInfo\n    })\n    .then(cardInfo => setCardInfo(cardInfo))\n}\n\nexport default App;\n","import React from 'react'\n\nconst About = () => (\n    <>\n        <h1>About</h1>\n        <p>This is a simple memory game meant as an exercise to get familiar with JavaScript, React and PWAs.</p>\n        <p>It will crawl <a href=\"https://www.comerge.net/team\">the Comerge Team Page</a> for updates when it's online\n        and use the profiles there to populate the cards with.</p>\n    </>\n);\n\nexport default About","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => (\n    <header style={headerStyle}>\n        <h1>CMRG Memory</h1>\n        <div><Link to=\"/\" style={headerLinkStyle}>Home</Link> | <Link to=\"/about\" style={headerLinkStyle}>About</Link></div>\n    </header>\n)\n\nconst headerStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n\n    alignItems: 'center',\n\n    padding: '.25em',\n\n    background: '#333',\n    color: 'white'\n}\n\nconst headerLinkStyle = {\n    color: 'white'\n}\n\nexport default Header","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport Store from './Store'\nimport About from './components/pages/About'\nimport Header from './components/layout/Header';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store>\n      <Router basename = {process.env.PUBLIC_URL}>\n        <Route path = \"/\" component={Header} />\n        <Route exact path=\"/\" component= {App} />\n        <Route path=\"/about\" component = {About} />\n      </Router>\n    </Store>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}